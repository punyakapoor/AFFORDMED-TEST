class Main {
    public boolean exist(char[][] board, String word) {
        int rows = board.length;
        int cols = board[0].length;
        
        
        boolean[][] marked = new boolean[rows][cols];
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                marked[row][col] = false;
            }
        }
        
        boolean found = false;
        
       
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                found = searchWord(board, marked, word, row, col, 0);
                if (found) return true;
            }
        }
        
        return found;
    }
    
    private boolean searchWord(char[][] board, boolean[][] marked, String word, int row, int col, int idx) {
        if (idx >= word.length()) return true; // We've reached the end of the word
        if (row < 0 || row >= board.length || col < 0 || col >= board[0].length) return false;
        if (marked[row][col] || board[row][col] != word.charAt(idx)) return false;
        marked[row][col] = true;
        boolean found = false;
        
        found = searchWord(board, marked, word, row, col - 1, idx + 1);
        if (!found) found = searchWord(board, marked, word, row, col + 1, idx + 1);
        if (!found) found = searchWord(board, marked, word, row - 1, col, idx + 1);
        if (!found) found = searchWord(board, marked, word, row + 1, col, idx + 1);
        
        marked[row][col] = false;  // Reset the state for later searchs
        return found;
    }
}
